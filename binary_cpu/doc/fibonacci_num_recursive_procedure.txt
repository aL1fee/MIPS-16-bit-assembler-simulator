				.data
n:				.word 19

msg1: 			.asciiz "Fibonacci number "
msg2: 			.asciiz " is "

				.text
main:

			la $t0, msg1				# load the base address of msg1
			move $a0, $t0				# move the base address of msg1 into the first argument
			li $v0, 4					# set the command of syscall to print a string  
			syscall						# print a string
	
			la $t1, n					# load the base address of n
			lw $t1, ($t1)				# load the value of n into $t1
			
			move $a0, $t1				# move n into the first argument
			li $v0, 1					# set the command of syscall to print an integer
			syscall 					# print an integer
			
			la $t0, msg2				
			move $a0, $t0
			li $v0, 4
			syscall						# print msg2
	
			move $a0, $t1				# set the first argument to n
			
			jal fib						# call fib(n) and link the return address to the following instruction
			
			
			move $a0, $v0				# move the return value of fib(n) to $a0
			li $v0, 1					# set the command of syscall to print an integer
			syscall 					# print an integer

			li $v0, 10					# terminate program 
			syscall						# Exit 

	
# Recursively computes a fibonacci number: a0 = the number of the the sequence
fib:
			addi $sp, -10				# allocate 5 words in the stack
			sw $s2, 8($sp)				# save $s2 in the stack
			sw $s1, 6($sp)				# save $s1 in the stack
			sw $s0, 4($sp)				# save $s0 in the stack
			sw $ra, 2($sp)				# save $ra in the stack
			sw $a0, 0($sp)				# save $a0 in the stack
			
			move $s0, $a0				# $s0 = n
			li $s1, 1					# $s1 = 1

			ble $s0, $s1, .fib_ret01	# if n <= 1 then jump to .fib_ret01
			j fib_ret					# else jump to fib_ret
			
			
.fib_ret01:	move $v0, $s0				

			lw $s2, 8($sp)				# load all the values to what they were when fib was called
			lw $s1, 6($sp)
			lw $s0, 4($sp)
			lw $ra, 2($sp)
			lw $a0, 0($sp)
			addi $sp, 10				# move the stack pointer to where it was when fib was called
			
			jr $ra						# return 0 or 1 to the caller  
			
fib_ret:	addi $s0, -1				
			move $a0, $s0				
			jal fib						# call fib(n - 1)
			
			move $s2, $v0				# set $s2 = the return value of fib(n - 1)
			
			addi $s0, -1
			move $a0, $s0
			
			jal fib						# call fib(n - 2)
			
			add $s2, $s2, $v0			# set $s2 = the return value of fib(n - 1) + the return value of fib(n - 2)
			
			move $v0, $s2				# set the first return value $v0 to $s2
			
			lw $s2, 8($sp)				# load all the values to what they were when fib was called
			lw $s1, 6($sp)
			lw $s0, 4($sp)
			lw $ra, 2($sp)
			lw $a0, 0($sp)
			addi $sp, 10				# move the stack pointer to where it was when fib was called
				
			jr $ra						# return $v0 to the caller
			