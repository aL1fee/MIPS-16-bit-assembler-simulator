				.data
n:				.word 17

print_arr_msg1: .asciiz "Fibonacci number "
print_arr_msg2: .asciiz " is "

				.text
main:

			la $t0, print_arr_msg1
			move $a0, $t0
			li $v0, 4
			syscall
	
			la $t1, n
			lw $t1, ($t1)
			
			move $a0, $t1
			li $v0, 1
			syscall 
			
			la $t0, print_arr_msg2
			move $a0, $t0
			li $v0, 4
			syscall
	
			move $a0, $t1
			
			jal fib
			
			move $a0, $v0
			li $v0, 1
			syscall 					# print the result integer stored in $a0

			li $v0, 10					# terminate program 
			syscall						# Exit 

	
# Recursively computes a fibonacci number: a0 = the number of the the sequence
fib:
			addi $sp, -12
			sw $s2, 10($sp)
			sw $s1, 8($sp)
			sw $s0, 6($sp)
			sw $ra, 4($sp)
			sw $a0, 0($sp)
			
			move $s0, $a0				# s0 = n
			li $s1, 1					# s1 = 1
			
			ble $s0, $zero, .fib_c_1	# if n <= 0
			j fib_c_1
			
.fib_c_1:	move $v0, $zero
			
			lw $s2, 10($sp)
			lw $s1, 8($sp)
			lw $s0, 6($sp)
			lw $ra, 4($sp)
			lw $a0, 0($sp)
			addi $sp, 12
			
			jr $ra
			
fib_c_1:	ble $s0, $s1, .fib_c_2		# if n <= 1
			j fib_c_2

.fib_c_2:	move $v0, $s1
			
			lw $s2, 10($sp)
			lw $s1, 8($sp)
			lw $s0, 6($sp)
			lw $ra, 4($sp)
			lw $a0, 0($sp)
			addi $sp, 12
			
			jr $ra
			
fib_c_2:	addi $s0, -1
			move $a0, $s0
			jal fib
			
			move $s2, $v0
			
			addi $s0, -1
			move $a0, $s0
			
			jal fib
			
			add $s2, $s2, $v0
			
			move $v0, $s2
			

			lw $s2, 10($sp)
			lw $s1, 8($sp)
			lw $s0, 6($sp)
			lw $ra, 4($sp)
			lw $a0, 0($sp)
			addi $sp, 12
				
			jr $ra
		